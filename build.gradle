buildscript {
	ext {
		springBootVersion = '1.5.7.RELEASE'
	}
	repositories {
		mavenCentral()

		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ("gradle.plugin.com.chrisgahlert:gradle-dcompose-plugin:0.9.1")
	}
}




apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "com.chrisgahlert.gradle-dcompose-plugin"

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	providedRuntime
}

ext {
	springCloudVersion = 'Dalston.SR3'
}

task stage(type: Copy, dependsOn: [clean,build]) {
	from jar.archivePath
	into project.rootDir
	rename {
		'app.jar'
	}
}
stage.mustRunAfter(clean)

clean << {
	project.file('app.jar').delete()
}

dependencies {
	compile files("./indexes")
	compile('org.springframework.cloud:spring-cloud-starter-aws')
	compile('org.springframework.cloud:spring-cloud-starter-oauth2')
	compile('org.springframework.cloud:spring-cloud-security')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-log4j2')
    compile group: 'org.apache.logging.log4j', name: 'log4j-nosql', version: '2.7'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.9.2'
    compile group: 'com.lmax', name: 'disruptor', version: '3.3.0'
    compile('org.springframework.boot:spring-boot-starter-security')
    compile ('org.mongodb:mongodb-driver:3.5.0')
	compile(group: 'org.springframework.cloud', name: 'spring-cloud-aws-context', version: '1.2.1.RELEASE')
    compile("org.hibernate:hibernate-search-orm:5.5.6.Final")
	compile group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.2.11.Final'
	compile(group: 'com.amazonaws', name: 'aws-java-sdk-ses', version: '1.11.206')
	compile(group: 'org.hibernate', name: 'hibernate-infinispan', version: '5.2.11.Final')
    compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5', version: '2.9.1')
	compile(group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.8.RELEASE')
	compile(group: 'org.apache.commons', name: 'commons-io', version: '1.3.2')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')

}

def testDatabasePort = 3306
def testDatabasePassword = 'PlanesWalker'
def JAVA_OPTS = ''

dcompose {
	testDatabase{
        image = 'mysql:5.5.53'
        portBindings = [":3306"]
        env = ["MYSQL_ROOT_PASSWORD=$testDatabasePassword"]
    }

	serverApplication{
		image = 'openjdk:8-jdk-alpine'
		portBindings = ["80:8080"]
		env = ["SENDGRID_API_KEY='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'," +
					   "MYSQL_URL='jdbc:mysql://localhost:3306/magicdb', MYSQL_USER='root', MYSQL_PASS='Planeswalker'," +
					   "JAVA_OPTS=''"]
		entrypoints = ["'h', '-c', 'java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar'"]
	}
}

check.dependsOn.remove(test)

//test {
    /*dependsOn startTestDatabaseContainer
    finalizedBy removeTestDatabaseContainer
    doFirst {
        systemProperty 'mysql.port', testDatabasePort
        systemProperty 'mysql.pw', testDatabasePassword*/
//}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
